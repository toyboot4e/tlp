/*!
`salsa` query groups

Most data types in this module are automatically generated by `salsa` macros.
*/

use std::sync::Arc;

use camino::Utf8PathBuf;

use crate::{
    db::intern::*,
    ir::lower::{
        def,
        loc::CrateLoc,
        tree::{CrateTree, ModuleTree},
    },
    syntax::ast,
    utils::line_index::LineIndex,
};

#[salsa::query_group(SourceDB)]
pub trait Source: salsa::Database {
    #[salsa::input]
    fn input(&self, path: Utf8PathBuf) -> Arc<String>;

    fn line_index(&self, path: Utf8PathBuf) -> Arc<LineIndex>;
}

fn line_index(db: &dyn Source, name: Utf8PathBuf) -> Arc<LineIndex> {
    let input = db.input(name);
    Arc::new(LineIndex::new(&input))
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct ParseResult {
    pub doc: ast::data::Document,
    pub errs: Vec<ast::ParseError>,
}

#[salsa::query_group(ParseDB)]
pub trait Parse: Source {
    /// The parsed form of the request.
    fn parse(&self, path: Utf8PathBuf) -> Arc<ParseResult>;
}

fn parse(db: &dyn Parse, path: Utf8PathBuf) -> Arc<ParseResult> {
    let src = db.input(path);
    // TODO: put parse result in ast module
    let (doc, errs) = ast::parse(&src);
    Arc::new(ParseResult { doc, errs })
}

#[salsa::query_group(LowerModuleDB)]
pub trait LowerModule: Parse + Intern {
    fn module_tree(&self, krate: CrateLoc) -> ModuleTree;
}

fn module_tree(db: &dyn LowerModule, krate: CrateLoc) -> ModuleTree {
    let tk = Utf8PathBuf::from("dummy-crate");
    // let doc = &db.parse(path).doc;
    // crate::ir::
    todo!()
}

#[salsa::query_group(LowerCrateDB)]
pub trait LowerCrate: LowerModule {
    fn crate_tree(&self, krate: CrateLoc) -> CrateTree;
}

fn crate_tree(db: &dyn LowerCrate, krate: CrateLoc) -> CrateTree {
    todo!()
}
